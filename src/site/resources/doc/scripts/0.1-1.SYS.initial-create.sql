----------------------------------------------------------------
-- connecte en SYSTEM
----------------------------------------------------------------
-- creation des roles et users
create role R_QRTZ_ADM;
create role R_QRTZ_USR;
create role R_QRTZ_READ;

grant connect, create session, create table, create sequence, create public synonym to R_QRTZ_ADM;
grant connect, create session to R_QRTZ_USR;
grant connect, create session to R_QRTZ_READ;

create user QRTZ_ADM identified by PASSWORD_SECRET_SIE;
create user QRTZ_USR identified by PASSWORD_SECRET_SIE_2;
create user QRTZ_READ identified by PASSWORD_DONNER_AU_SED;

grant unlimited tablespace to QRTZ_ADM;
grant R_QRTZ_ADM to QRTZ_ADM;
grant R_QRTZ_USR to QRTZ_USR;
grant R_QRTZ_READ to QRTZ_READ;

----------------------------------------------------------------
-- Creation des tablespaces : finaliser les nomns de fichiers par le SIE

-- petit, prevoir des extends de 20 Mo, initial 20 Mo
CREATE TABLESPACE TS_QRTZ_PARAM DATAFILE
'E:\oradata\ORADEV\dbfusers\ORADEV_ts_dev.dbf'
SIZE 20M AUTOEXTEND ON NEXT 20M MAXSIZE 100M
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 512K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK OFF;


-- prevoir des extends de 100 Mo, initial 50 Mo
CREATE TABLESPACE TS_QRTZ_DATA DATAFILE
'E:\oradata\ORADEV\dbfusers\ORADEV_ts_dev.dbf'
SIZE 50M AUTOEXTEND ON NEXT 100M MAXSIZE 2000M
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 512K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK OFF;


-- moyen, prevoir des extends de 100 Mo, initial 20 Mo
CREATE TABLESPACE TS_QRTZ_INDEX DATAFILE
'E:\oradata\ORADEV\dbfusers\ORADEV_ts_dev.dbf'
SIZE 20M AUTOEXTEND ON NEXT 100M MAXSIZE 2000M
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 512K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK OFF;


-- le plus petit possible, pas d'extend, bloque
CREATE TABLESPACE TS_QRTZ_DEFAULT DATAFILE
'E:\oradata\ORADEV\dbfusers\ORADEV_ts_dev.dbf'
SIZE 10M AUTOEXTEND OFF
LOGGING
ONLINE
PERMANENT
EXTENT MANAGEMENT LOCAL UNIFORM SIZE 512K
BLOCKSIZE 8K
SEGMENT SPACE MANAGEMENT AUTO
FLASHBACK OFF;

alter tablespace TS_QRTZ_DEFAULT read only;


-- on redirige par defaut sur le tablespace USERS pour flagger les mises en recette sauvages...
alter user QRTZ_ADM default tablespace TS_QRTZ_DEFAULT;

-- fin de la section admin bdd
----------------------------------------------------------------

----------------------------------------------------------------
-- Connecte en QRTZ_ADM
----------------------------------------------------------------

--==============================================================
-- Table: QRTZ_JOB_DETAILS
--==============================================================
CREATE TABLE QRTZ_JOB_DETAILS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL, 
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_JOB_DETAILS for QRTZ_JOB_DETAILS;
grant select, insert, update, delete on QRTZ_JOB_DETAILS to R_QRTZ_USR;
grant select on QRTZ_JOB_DETAILS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP) 
      REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP) 
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_TRIGGERS for QRTZ_TRIGGERS;
grant select, insert, update, delete on QRTZ_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_SIMPLE_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_SIMPLE_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_SIMPLE_TRIGGERS for QRTZ_SIMPLE_TRIGGERS;
grant select, insert, update, delete on QRTZ_SIMPLE_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_SIMPLE_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_CRON_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_CRON_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_CRON_TRIGGERS for QRTZ_CRON_TRIGGERS;
grant select, insert, update, delete on QRTZ_CRON_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_CRON_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_SIMPROP_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_SIMPROP_TRIGGERS
  (          
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    STR_PROP_1 VARCHAR2(512) NULL,
    STR_PROP_2 VARCHAR2(512) NULL,
    STR_PROP_3 VARCHAR2(512) NULL,
    INT_PROP_1 NUMBER(10) NULL,
    INT_PROP_2 NUMBER(10) NULL,
    LONG_PROP_1 NUMBER(13) NULL,
    LONG_PROP_2 NUMBER(13) NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR2(1) NULL,
    BOOL_PROP_2 VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_SIMPROP_TRIGGERS for QRTZ_SIMPROP_TRIGGERS;
grant select, insert, update, delete on QRTZ_SIMPROP_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_SIMPROP_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_BLOB_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_BLOB_TRIGGERS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_BLOB_TRIGGERS for QRTZ_BLOB_TRIGGERS;
grant select, insert, update, delete on QRTZ_BLOB_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_BLOB_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_CALENDARS
--==============================================================
CREATE TABLE QRTZ_CALENDARS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    CALENDAR_NAME  VARCHAR2(200) NOT NULL, 
    CALENDAR BLOB NOT NULL,
    CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_CALENDARS for QRTZ_CALENDARS;
grant select, insert, update, delete on QRTZ_CALENDARS to R_QRTZ_USR;
grant select on QRTZ_CALENDARS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_PAUSED_TRIGGER_GRPS
--==============================================================
CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL, 
    CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_PAUSED_TRIGGER_GRPS for QRTZ_PAUSED_TRIGGER_GRPS;
grant select, insert, update, delete on QRTZ_PAUSED_TRIGGER_GRPS to R_QRTZ_USR;
grant select on QRTZ_PAUSED_TRIGGER_GRPS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_FIRED_TRIGGERS
--==============================================================
CREATE TABLE QRTZ_FIRED_TRIGGERS 
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_NONCONCURRENT VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_FIRED_TRIGGERS for QRTZ_FIRED_TRIGGERS;
grant select, insert, update, delete on QRTZ_FIRED_TRIGGERS to R_QRTZ_USR;
grant select on QRTZ_FIRED_TRIGGERS to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_SCHEDULER_STATE
--==============================================================
CREATE TABLE QRTZ_SCHEDULER_STATE 
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_SCHEDULER_STATE for QRTZ_SCHEDULER_STATE;
grant select, insert, update, delete on QRTZ_SCHEDULER_STATE to R_QRTZ_USR;
grant select on QRTZ_SCHEDULER_STATE to R_QRTZ_READ;

--==============================================================
-- Table: QRTZ_LOCKS
--==============================================================
CREATE TABLE QRTZ_LOCKS
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME  VARCHAR2(40) NOT NULL, 
    CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
)
TABLESPACE TS_QRTZ_DATA;

create public synonym QRTZ_LOCKS for QRTZ_LOCKS;
grant select, insert, update, delete on QRTZ_LOCKS to R_QRTZ_USR;
grant select on QRTZ_LOCKS to R_QRTZ_READ;




create index idx_qrtz_j_req_recovery on QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_j_grp on QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP) TABLESPACE TS_QRTZ_INDEX;

create index idx_qrtz_t_j on QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_jg on QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_c on QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_g on QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_state on QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_n_state on QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_n_g_state on QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_next_fire_time on QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_nft_st on QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_nft_misfire on QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_nft_st_misfire on QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_t_nft_st_misfire_grp on QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE) TABLESPACE TS_QRTZ_INDEX;

create index idx_qrtz_ft_trig_inst_name on QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_ft_inst_job_req_rcvry on QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_ft_j_g on QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_ft_jg on QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_ft_t_g on QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) TABLESPACE TS_QRTZ_INDEX;
create index idx_qrtz_ft_tg on QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP) TABLESPACE TS_QRTZ_INDEX;

----------------------------------------------------------------
-- Connecte en QRTZ_USR
----------------------------------------------------------------
select * from QRTZ_TRIGGERS;
select * from QRTZ_SIMPLE_TRIGGERS;
select * from QRTZ_CRON_TRIGGERS;
select * from QRTZ_SIMPROP_TRIGGERS;
select * from QRTZ_BLOB_TRIGGERS;
select * from QRTZ_CALENDARS;
select * from QRTZ_PAUSED_TRIGGER_GRPS;
select * from QRTZ_FIRED_TRIGGERS;
select * from QRTZ_SCHEDULER_STATE;
select * from QRTZ_LOCKS;
select * from QRTZ_JOB_DETAILS;
